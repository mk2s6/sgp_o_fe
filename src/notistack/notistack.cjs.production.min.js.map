{"version":3,"file":"notistack.cjs.production.min.js","sources":["../src/SnackbarContext.ts","../src/utils/constants.ts","../src/SnackbarContent/SnackbarContent.tsx","../src/SnackbarItem/SnackbarItem.util.ts","../src/utils/defaultIconVariants.tsx","../src/utils/createChainedFunction.js","../src/utils/useEventCallback.js","../src/SnackbarItem/SnackbarItem.tsx","../src/SnackbarItem/Snackbar.js","../src/SnackbarContainer.tsx","../src/SnackbarProvider.tsx","../src/useSnackbar.ts","../src/withSnackbar.js"],"sourcesContent":["import React from 'react';\r\nimport { ProviderContext } from '.';\r\n\r\n// @ts-ignore\r\nexport default React.createContext<ProviderContext>();\r\n","import Slide from '@material-ui/core/Slide';\r\nimport { SnackbarClassKey } from '@material-ui/core/Snackbar';\r\nimport { CloseReason, ContainerClassKey, SnackbarProviderProps, VariantType, SnackbarOrigin, VariantClassKey } from '../index';\r\nimport { SnackbarItemProps } from '../SnackbarItem';\r\nimport { Snack } from '../SnackbarProvider';\r\n\r\nexport const allClasses: {\r\n    mui: Record<SnackbarClassKey, {}>;\r\n    container: Record<ContainerClassKey, {}>;\r\n} = {\r\n    mui: {\r\n        root: {},\r\n        anchorOriginTopCenter: {},\r\n        anchorOriginBottomCenter: {},\r\n        anchorOriginTopRight: {},\r\n        anchorOriginBottomRight: {},\r\n        anchorOriginTopLeft: {},\r\n        anchorOriginBottomLeft: {},\r\n    },\r\n    container: {\r\n        containerRoot: {},\r\n        containerAnchorOriginTopCenter: {},\r\n        containerAnchorOriginBottomCenter: {},\r\n        containerAnchorOriginTopRight: {},\r\n        containerAnchorOriginBottomRight: {},\r\n        containerAnchorOriginTopLeft: {},\r\n        containerAnchorOriginBottomLeft: {},\r\n    },\r\n};\r\n\r\nexport const MESSAGES = {\r\n    NO_PERSIST_ALL: 'WARNING - notistack: Reached maxSnack while all enqueued snackbars have \\'persist\\' flag. Notistack will dismiss the oldest snackbar anyway to allow other ones in the queue to be presented.',\r\n};\r\n\r\nexport const SNACKBAR_INDENTS = {\r\n    view: { default: 20, dense: 4 },\r\n    snackbar: { default: 6, dense: 2 },\r\n};\r\n\r\nexport const DEFAULTS = {\r\n    maxSnack: 3,\r\n    dense: false,\r\n    hideIconVariant: false,\r\n    variant: 'default' as VariantType,\r\n    autoHideDuration: 5000,\r\n    anchorOrigin: { vertical: 'bottom', horizontal: 'left' } as SnackbarOrigin,\r\n    TransitionComponent: Slide,\r\n    transitionDuration: {\r\n        enter: 225,\r\n        exit: 195,\r\n    },\r\n};\r\n\r\nexport const capitalise = (text: string): string => text.charAt(0).toUpperCase() + text.slice(1);\r\n\r\nexport const originKeyExtractor = (anchor: Snack['anchorOrigin']): string => (\r\n    `${capitalise(anchor.vertical)}${capitalise(anchor.horizontal)}`\r\n);\r\n\r\n/**\r\n * Omit SnackbarContainer class keys that are not needed for SnackbarItem\r\n */\r\nexport const omitContainerKeys = (classes: SnackbarProviderProps['classes']): SnackbarItemProps['classes'] => (\r\n    // @ts-ignore\r\n    Object.keys(classes).filter(key => !allClasses.container[key]).reduce((obj, key) => ({ ...obj, [key]: classes[key] }), {})\r\n);\r\n\r\nexport const REASONS: { [key: string]: CloseReason } = {\r\n    TIMEOUT: 'timeout',\r\n    CLICKAWAY: 'clickaway',\r\n    MAXSNACK: 'maxsnack',\r\n    INSTRUCTED: 'instructed',\r\n};\r\n\r\n/** Tranforms classes name */\r\nexport const transformer = {\r\n    toContainerAnchorOrigin: (origin: string) => `containerAnchorOrigin${origin}` as ContainerClassKey,\r\n    toAnchorOrigin: ({ vertical, horizontal }: SnackbarOrigin) => (\r\n        `anchorOrigin${capitalise(vertical)}${capitalise(horizontal)}` as SnackbarClassKey\r\n    ),\r\n    toVariant: (variant: VariantType) => `variant${capitalise(variant)}` as VariantClassKey,\r\n};\r\n\r\nexport const isDefined = (value: string | null | undefined | number): boolean => (!!value || value === 0);\r\n\r\nconst numberOrNull = (numberish?: number | null) => (\r\n    typeof numberish === 'number' || numberish === null\r\n);\r\n\r\n// @ts-ignore\r\nexport const merge = (options, props, defaults) => (name: keyof Snack): any => {\r\n    if (name === 'autoHideDuration') {\r\n        if (numberOrNull(options.autoHideDuration)) return options.autoHideDuration;\r\n        if (numberOrNull(props.autoHideDuration)) return props.autoHideDuration;\r\n        return DEFAULTS.autoHideDuration;\r\n    }\r\n\r\n    return options[name] || props[name] || defaults[name];\r\n};\r\n\r\nexport function objectMerge(options = {}, props = {}, defaults = {}) {\r\n    return {\r\n        ...defaults,\r\n        ...props,\r\n        ...options,\r\n    };\r\n}\r\n","import React, { forwardRef } from 'react';\r\nimport clsx from 'clsx';\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { SnackbarContentProps } from '../index';\r\n\r\nconst componentName = 'SnackbarContent';\r\n\r\nconst classes = {\r\n    root: `${componentName}-root`,\r\n};\r\n\r\nconst Root = styled('div')(({ theme }) => ({\r\n    [`&.${classes.root}`]: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        flexGrow: 1,\r\n        [theme.breakpoints.up('sm')]: {\r\n            flexGrow: 'initial',\r\n            minWidth: 288,\r\n        },\r\n    },\r\n}));\r\n\r\nconst SnackbarContent = forwardRef<HTMLDivElement, SnackbarContentProps>(({ className, ...props }, ref) => (\r\n    <Root ref={ref} className={clsx(classes.root, className)} {...props} />\r\n));\r\n\r\nexport default SnackbarContent;\r\n","import { Snack } from '../SnackbarProvider';\r\n\r\nconst DIRECTION = {\r\n    right: 'left',\r\n    left: 'right',\r\n    bottom: 'up',\r\n    top: 'down',\r\n} as const;\r\nexport type DirectionType = typeof DIRECTION[keyof typeof DIRECTION]\r\n\r\nexport const getTransitionDirection = (anchorOrigin: Snack['anchorOrigin']): DirectionType => {\r\n    if (anchorOrigin.horizontal !== 'center') {\r\n        return DIRECTION[anchorOrigin.horizontal];\r\n    }\r\n    return DIRECTION[anchorOrigin.vertical];\r\n};\r\n","import React from 'react';\r\nimport SvgIcon, { SvgIconProps } from '@material-ui/core/SvgIcon';\r\nimport { IconVariant } from '../index';\r\n\r\ntype Icon = (props: SvgIconProps) => JSX.Element;\r\n\r\nconst CheckIcon: Icon = props => (\r\n    <SvgIcon {...props}>\r\n        <path d=\"M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41\r\n        10.59L10 14.17L17.59 6.58L19 8L10 17Z\" />\r\n    </SvgIcon>\r\n);\r\n\r\nconst WarningIcon: Icon = props => (\r\n    <SvgIcon {...props}>\r\n        <path d=\"M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z\" />\r\n    </SvgIcon>\r\n);\r\n\r\nconst ErrorIcon: Icon = props => (\r\n    <SvgIcon {...props}>\r\n        <path d=\"M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,\r\n        6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,\r\n        13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z\" />\r\n    </SvgIcon>\r\n);\r\n\r\nconst InfoIcon: Icon = props => (\r\n    <SvgIcon {...props}>\r\n        <path d=\"M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,\r\n        0 22,12A10,10 0 0,0 12,2Z\" />\r\n    </SvgIcon>\r\n);\r\n\r\nconst iconStyles = {\r\n    fontSize: 20,\r\n    marginInlineEnd: 8,\r\n};\r\n\r\nconst defaultIconVariants: IconVariant = {\r\n    default: undefined,\r\n    success: <CheckIcon style={iconStyles} />,\r\n    warning: <WarningIcon style={iconStyles} />,\r\n    error: <ErrorIcon style={iconStyles} />,\r\n    info: <InfoIcon style={iconStyles} />,\r\n};\r\n\r\nexport default defaultIconVariants;\r\n","/**\r\n * @link https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/createChainedFunction.js\r\n */\r\nexport default function createChainedFunction(funcs, extraArg) {\r\n    return funcs.reduce((acc, func) => {\r\n        if (func == null) return acc;\r\n\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (typeof func !== 'function') {\r\n                // eslint-disable-next-line no-console\r\n                console.error('Invalid Argument Type. must only provide functions, undefined, or null.');\r\n            }\r\n        }\r\n\r\n        return function chainedFunction(...args) {\r\n            const argums = [...args];\r\n            if (extraArg && argums.indexOf(extraArg) === -1) {\r\n                argums.push(extraArg);\r\n            }\r\n            acc.apply(this, argums);\r\n            func.apply(this, argums);\r\n        };\r\n    }, () => { });\r\n}\r\n","/**\r\n * @link https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/useEventCallback.js\r\n */\r\nimport * as React from 'react';\r\n\r\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\r\n\r\nexport default function useEventCallback(fn) {\r\n    const ref = React.useRef(fn);\r\n    useEnhancedEffect(() => {\r\n        ref.current = fn;\r\n    });\r\n    return React.useCallback((...args) => (0, ref.current)(...args), []);\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport clsx from 'clsx';\r\nimport { emphasize, styled } from '@material-ui/core/styles';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport type { SnackbarClassKey } from '@material-ui/core';\r\nimport SnackbarContent from '../SnackbarContent';\r\nimport { getTransitionDirection } from './SnackbarItem.util';\r\nimport { REASONS, objectMerge, DEFAULTS, transformer } from '../utils/constants';\r\nimport { SharedProps, RequiredBy, TransitionHandlerProps, SnackbarProviderProps as ProviderProps, ClassNameMap } from '../index';\r\nimport defaultIconVariants from '../utils/defaultIconVariants';\r\nimport createChainedFunction from '../utils/createChainedFunction';\r\nimport { Snack } from '../SnackbarProvider';\r\nimport Snackbar from './Snackbar';\r\n\r\nconst componentName = 'SnackbarItem';\r\n\r\nconst classes = {\r\n    contentRoot: `${componentName}-contentRoot`,\r\n    lessPadding: `${componentName}-lessPadding`,\r\n    variantSuccess: `${componentName}-variantSuccess`,\r\n    variantError: `${componentName}-variantError`,\r\n    variantInfo: `${componentName}-variantInfo`,\r\n    variantWarning: `${componentName}-variantWarning`,\r\n    message: `${componentName}-message`,\r\n    action: `${componentName}-action`,\r\n    wrappedRoot: `${componentName}-wrappedRoot`,\r\n};\r\n\r\nconst StyledSnackbar = styled(Snackbar)(({ theme }) => {\r\n    const mode = theme.palette.mode || theme.palette.type;\r\n    const backgroundColor = emphasize(theme.palette.background.default, mode === 'light' ? 0.8 : 0.98);\r\n\r\n    return {\r\n        [`&.${classes.wrappedRoot}`]: {\r\n            position: 'relative',\r\n            transform: 'translateX(0)',\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n        },\r\n        [`.${classes.contentRoot}`]: {\r\n            ...theme.typography.body2,\r\n            backgroundColor,\r\n            color: theme.palette.getContrastText(backgroundColor),\r\n            alignItems: 'center',\r\n            padding: '6px 16px',\r\n            borderRadius: '4px',\r\n            boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)',\r\n        },\r\n        [`.${classes.lessPadding}`]: {\r\n            paddingLeft: 8 * 2.5,\r\n        },\r\n        [`.${classes.variantSuccess}`]: {\r\n            backgroundColor: '#43a047', // green\r\n            color: '#fff',\r\n        },\r\n        [`.${classes.variantError}`]: {\r\n            backgroundColor: '#d32f2f', // dark red\r\n            color: '#fff',\r\n        },\r\n        [`.${classes.variantInfo}`]: {\r\n            backgroundColor: '#2196f3', // nice blue\r\n            color: '#fff',\r\n        },\r\n        [`.${classes.variantWarning}`]: {\r\n            backgroundColor: '#ff9800', // amber\r\n            color: '#fff',\r\n        },\r\n        [`.${classes.message}`]: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: '8px 0',\r\n        },\r\n        [`.${classes.action}`]: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            marginLeft: 'auto',\r\n            paddingLeft: 16,\r\n            marginRight: -8,\r\n        },\r\n    };\r\n});\r\n\r\ntype RemovedProps =\r\n    | 'variant' // the one received from Provider is processed and passed to snack prop\r\n    | 'anchorOrigin' // same as above\r\n    | 'autoHideDuration' // same as above\r\n    | 'preventDuplicate' // the one recevied from enqueueSnackbar is processed in provider, therefore shouldn't be passed to SnackbarItem */\r\n\r\nexport interface SnackbarItemProps extends RequiredBy<Omit<SharedProps, RemovedProps>, 'onEntered' | 'onExited' | 'onClose'> {\r\n    snack: Snack;\r\n    dense: ProviderProps['dense'];\r\n    iconVariant: ProviderProps['iconVariant'];\r\n    hideIconVariant: ProviderProps['hideIconVariant'];\r\n    classes: Partial<ClassNameMap<SnackbarClassKey>>;\r\n}\r\n\r\nconst SnackbarItem: React.FC<SnackbarItemProps> = ({ classes: propClasses, ...props }) => {\r\n    const timeout = useRef<ReturnType<typeof setTimeout>>();\r\n    const [collapsed, setCollapsed] = useState(true);\r\n\r\n    useEffect(() => (): void => {\r\n        if (timeout.current) {\r\n            clearTimeout(timeout.current);\r\n        }\r\n    }, []);\r\n\r\n    const handleClose = createChainedFunction([props.snack.onClose, props.onClose], props.snack.key);\r\n\r\n    const handleEntered: TransitionHandlerProps['onEntered'] = () => {\r\n        if (props.snack.requestClose) {\r\n            handleClose(null, REASONS.INSTRCUTED);\r\n        }\r\n    };\r\n\r\n    const handleExitedScreen = (): void => {\r\n        timeout.current = setTimeout(() => {\r\n            setCollapsed(!collapsed);\r\n        }, 125);\r\n    };\r\n\r\n    const {\r\n        style,\r\n        dense,\r\n        ariaAttributes: otherAriaAttributes,\r\n        className: otherClassName,\r\n        hideIconVariant,\r\n        iconVariant,\r\n        snack,\r\n        action: otherAction,\r\n        content: otherContent,\r\n        TransitionComponent: otherTranComponent,\r\n        TransitionProps: otherTranProps,\r\n        transitionDuration: otherTranDuration,\r\n        onEnter: ignoredOnEnter,\r\n        onEntered: ignoredOnEntered,\r\n        onEntering: ignoredOnEntering,\r\n        onExit: ignoredOnExit,\r\n        onExited: ignoredOnExited,\r\n        onExiting: ignoredOnExiting,\r\n        ...other\r\n    } = props;\r\n\r\n    const {\r\n        persist,\r\n        key,\r\n        open,\r\n        entered,\r\n        requestClose,\r\n        className: singleClassName,\r\n        variant,\r\n        content: singleContent,\r\n        action: singleAction,\r\n        ariaAttributes: singleAriaAttributes,\r\n        anchorOrigin,\r\n        message: snackMessage,\r\n        TransitionComponent: singleTranComponent,\r\n        TransitionProps: singleTranProps,\r\n        transitionDuration: singleTranDuration,\r\n        onEnter,\r\n        onEntered,\r\n        onEntering,\r\n        onExit,\r\n        onExited,\r\n        onExiting,\r\n        ...singleSnackProps\r\n    } = snack;\r\n\r\n    const icon = {\r\n        ...defaultIconVariants,\r\n        ...iconVariant,\r\n    }[variant];\r\n\r\n    const ariaAttributes = {\r\n        'aria-describedby': 'notistack-snackbar',\r\n        ...objectMerge(singleAriaAttributes, otherAriaAttributes),\r\n    };\r\n\r\n    const TransitionComponent = singleTranComponent || otherTranComponent || DEFAULTS.TransitionComponent;\r\n    const transitionDuration = objectMerge(singleTranDuration, otherTranDuration, DEFAULTS.transitionDuration);\r\n    const transitionProps = {\r\n        direction: getTransitionDirection(anchorOrigin),\r\n        ...objectMerge(singleTranProps, otherTranProps),\r\n    };\r\n\r\n    let action = singleAction || otherAction;\r\n    if (typeof action === 'function') {\r\n        action = action(key);\r\n    }\r\n\r\n    let content = singleContent || otherContent;\r\n    if (typeof content === 'function') {\r\n        content = content(key, snack.message);\r\n    }\r\n\r\n    // eslint-disable-next-line operator-linebreak\r\n    const callbacks: { [key in keyof TransitionHandlerProps]?: any } =\r\n        ['onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].reduce((acc, cbName) => ({\r\n            ...acc,\r\n            [cbName]: createChainedFunction([\r\n                props.snack[cbName as keyof Snack],\r\n                props[cbName as keyof SnackbarItemProps],\r\n            ], props.snack.key),\r\n        }), {});\r\n\r\n    return (\r\n        <Collapse\r\n            unmountOnExit\r\n            timeout={175}\r\n            in={collapsed}\r\n            onExited={callbacks.onExited}\r\n        >\r\n            <StyledSnackbar\r\n                {...other}\r\n                {...singleSnackProps}\r\n                open={open}\r\n                className={clsx(\r\n                    propClasses.root,\r\n                    classes.wrappedRoot,\r\n                    propClasses[transformer.toAnchorOrigin(anchorOrigin)],\r\n                )}\r\n                onClose={handleClose}\r\n            >\r\n                <TransitionComponent\r\n                    appear\r\n                    in={open}\r\n                    timeout={transitionDuration}\r\n                    {...transitionProps}\r\n                    onExit={callbacks.onExit}\r\n                    onExiting={callbacks.onExiting}\r\n                    onExited={handleExitedScreen}\r\n                    onEnter={callbacks.onEnter}\r\n                    onEntering={callbacks.onEntering}\r\n                    // order matters. first callbacks.onEntered to set entered: true,\r\n                    // then handleEntered to check if there's a request for closing\r\n                    onEntered={createChainedFunction([callbacks.onEntered, handleEntered])}\r\n                >\r\n                    {/* @ts-ignore */}\r\n                    {content || (\r\n                        <SnackbarContent\r\n                            {...ariaAttributes}\r\n                            role=\"alert\"\r\n                            style={style}\r\n                            className={clsx(\r\n                                classes.contentRoot,\r\n                                { [classes.lessPadding]: !hideIconVariant && icon },\r\n                                classes[transformer.toVariant(variant)],\r\n                                otherClassName,\r\n                                singleClassName,\r\n                            )}\r\n                        >\r\n                            <div id={ariaAttributes['aria-describedby']} className={classes.message}>\r\n                                {!hideIconVariant ? icon : null}\r\n                                {snackMessage}\r\n                            </div>\r\n                            {action && (\r\n                                <div className={classes.action}>{action}</div>\r\n                            )}\r\n                        </SnackbarContent>\r\n                    )}\r\n                </TransitionComponent>\r\n            </StyledSnackbar>\r\n        </Collapse>\r\n    );\r\n};\r\n\r\nexport default SnackbarItem;\r\n","/**\r\n * @link https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Snackbar/Snackbar.js\r\n */\r\nimport * as React from 'react';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { REASONS } from '../utils/constants';\r\nimport useEventCallback from '../utils/useEventCallback';\r\n\r\nconst Snackbar = React.forwardRef((props, ref) => {\r\n    const {\r\n        children,\r\n        autoHideDuration,\r\n        ClickAwayListenerProps,\r\n        disableWindowBlurListener = false,\r\n        onClose,\r\n        onMouseEnter,\r\n        onMouseLeave,\r\n        open,\r\n        resumeHideDuration,\r\n        ...other\r\n    } = props;\r\n\r\n    const timerAutoHide = React.useRef();\r\n\r\n    const handleClose = useEventCallback((...args) => {\r\n        if (onClose) {\r\n            onClose(...args);\r\n        }\r\n    });\r\n\r\n    const setAutoHideTimer = useEventCallback((autoHideDurationParam) => {\r\n        if (!onClose || autoHideDurationParam == null) {\r\n            return;\r\n        }\r\n\r\n        clearTimeout(timerAutoHide.current);\r\n        timerAutoHide.current = setTimeout(() => {\r\n            handleClose(null, REASONS.TIMEOUT);\r\n        }, autoHideDurationParam);\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        if (open) {\r\n            setAutoHideTimer(autoHideDuration);\r\n        }\r\n\r\n        return () => {\r\n            clearTimeout(timerAutoHide.current);\r\n        };\r\n    }, [open, autoHideDuration, setAutoHideTimer]);\r\n\r\n    /**\r\n     * Pause the timer when the user is interacting with the Snackbar\r\n     * or when the user hide the window.\r\n     */\r\n    const handlePause = () => {\r\n        clearTimeout(timerAutoHide.current);\r\n    };\r\n\r\n    /**\r\n     * Restart the timer when the user is no longer interacting with the Snackbar\r\n     * or when the window is shown back.\r\n     */\r\n    const handleResume = React.useCallback(() => {\r\n        if (autoHideDuration != null) {\r\n            setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\r\n        }\r\n    }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\r\n\r\n    const handleMouseEnter = (event) => {\r\n        if (onMouseEnter) {\r\n            onMouseEnter(event);\r\n        }\r\n        handlePause();\r\n    };\r\n\r\n    const handleMouseLeave = (event) => {\r\n        if (onMouseLeave) {\r\n            onMouseLeave(event);\r\n        }\r\n        handleResume();\r\n    };\r\n\r\n    const handleClickAway = (event) => {\r\n        if (onClose) {\r\n            onClose(event, REASONS.CLICKAWAY);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (!disableWindowBlurListener && open) {\r\n            window.addEventListener('focus', handleResume);\r\n            window.addEventListener('blur', handlePause);\r\n\r\n            return () => {\r\n                window.removeEventListener('focus', handleResume);\r\n                window.removeEventListener('blur', handlePause);\r\n            };\r\n        }\r\n\r\n        return undefined;\r\n    }, [disableWindowBlurListener, handleResume, open]);\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={handleClickAway} {...ClickAwayListenerProps}>\r\n            <div onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} ref={ref} {...other}>\r\n                {children}\r\n            </div>\r\n        </ClickAwayListener>\r\n    );\r\n});\r\n\r\nexport default Snackbar;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { SNACKBAR_INDENTS } from './utils/constants';\r\nimport { SnackbarProviderProps } from '.';\r\n\r\nconst collapse = {\r\n    // Material-UI 4.12.x and above uses MuiCollapse-root; earlier versions use\r\n    // Mui-Collapse-container.  https://github.com/mui-org/material-ui/pull/24084\r\n    container: '& > .MuiCollapse-container, & > .MuiCollapse-root',\r\n    wrapper: '& > .MuiCollapse-container > .MuiCollapse-wrapper, & > .MuiCollapse-root > .MuiCollapse-wrapper',\r\n};\r\n\r\nconst xsWidthMargin = 16;\r\n\r\nconst componentName = 'SnackbarContainer';\r\n\r\nconst classes = {\r\n    root: `${componentName}-root`,\r\n    rootDense: `${componentName}-rootDense`,\r\n    top: `${componentName}-top`,\r\n    bottom: `${componentName}-bottom`,\r\n    left: `${componentName}-left`,\r\n    right: `${componentName}-right`,\r\n    center: `${componentName}-center`,\r\n};\r\n\r\nconst Root = styled('div')(({ theme }) => ({\r\n    [`&.${classes.root}`]: {\r\n        boxSizing: 'border-box',\r\n        display: 'flex',\r\n        maxHeight: '100%',\r\n        position: 'fixed',\r\n        zIndex: theme.zIndex.snackbar,\r\n        height: 'auto',\r\n        width: 'auto',\r\n        transition: 'top 300ms ease 0ms, right 300ms ease 0ms, bottom 300ms ease 0ms, left 300ms ease 0ms, margin 300ms ease 0ms, max-width 300ms ease 0ms',\r\n        // container itself is invisible and should not block clicks, clicks should be passed to its children\r\n        pointerEvents: 'none',\r\n        [collapse.container]: {\r\n            pointerEvents: 'all',\r\n        },\r\n        [collapse.wrapper]: {\r\n            padding: `${SNACKBAR_INDENTS.snackbar.default}px 0px`,\r\n            transition: 'padding 300ms ease 0ms',\r\n        },\r\n        maxWidth: `calc(100% - ${SNACKBAR_INDENTS.view.default * 2}px)`,\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            maxWidth: `calc(100% - ${xsWidthMargin * 2}px)`,\r\n        },\r\n    },\r\n    [`&.${classes.rootDense}`]: {\r\n        [collapse.wrapper]: {\r\n            padding: `${SNACKBAR_INDENTS.snackbar.dense}px 0px`,\r\n        },\r\n    },\r\n    [`&.${classes.top}`]: {\r\n        top: SNACKBAR_INDENTS.view.default - SNACKBAR_INDENTS.snackbar.default,\r\n        flexDirection: 'column',\r\n    },\r\n    [`&.${classes.bottom}`]: {\r\n        bottom: SNACKBAR_INDENTS.view.default - SNACKBAR_INDENTS.snackbar.default,\r\n        flexDirection: 'column-reverse',\r\n    },\r\n    [`&.${classes.left}`]: {\r\n        left: SNACKBAR_INDENTS.view.default,\r\n        [theme.breakpoints.up('sm')]: {\r\n            alignItems: 'flex-start',\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            left: `${xsWidthMargin}px`,\r\n        },\r\n    },\r\n    [`&.${classes.right}`]: {\r\n        right: SNACKBAR_INDENTS.view.default,\r\n        [theme.breakpoints.up('sm')]: {\r\n            alignItems: 'flex-end',\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            right: `${xsWidthMargin}px`,\r\n        },\r\n    },\r\n    [`&.${classes.center}`]: {\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n        [theme.breakpoints.up('sm')]: {\r\n            alignItems: 'center',\r\n        },\r\n    },\r\n}));\r\n\r\ninterface SnackbarContainerProps {\r\n    children: JSX.Element | JSX.Element[];\r\n    className?: string;\r\n    dense: SnackbarProviderProps['dense'];\r\n    anchorOrigin: NonNullable<SnackbarProviderProps['anchorOrigin']>;\r\n}\r\n\r\nconst SnackbarContainer: React.FC<SnackbarContainerProps> = (props) => {\r\n    const { className, anchorOrigin, dense, ...other } = props;\r\n\r\n    const combinedClassname = clsx(\r\n        classes[anchorOrigin.vertical],\r\n        classes[anchorOrigin.horizontal],\r\n        { [classes.rootDense]: dense },\r\n        classes.root, // root should come after others to override maxWidth\r\n        className,\r\n    );\r\n\r\n    return (\r\n        <Root className={combinedClassname} {...other} />\r\n    );\r\n};\r\n\r\nexport default React.memo(SnackbarContainer);\r\n","import React, { Component } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport clsx from 'clsx';\r\nimport SnackbarContext from './SnackbarContext';\r\nimport { MESSAGES, REASONS, originKeyExtractor, omitContainerKeys, DEFAULTS, merge, transformer, isDefined } from './utils/constants';\r\nimport SnackbarItem from './SnackbarItem';\r\nimport SnackbarContainer from './SnackbarContainer';\r\nimport warning from './utils/warning';\r\nimport { SnackbarProviderProps, SnackbarKey, SnackbarMessage, OptionsObject, RequiredBy, ProviderContext, TransitionHandlerProps } from '.';\r\nimport createChainedFunction from './utils/createChainedFunction';\r\n\r\ntype Reducer = (state: State) => State;\r\ntype SnacksByPosition = { [key: string]: Snack[] };\r\n\r\nexport interface Snack extends RequiredBy<OptionsObject, 'key' | 'variant' | 'anchorOrigin'> {\r\n    message: SnackbarMessage;\r\n    open: boolean;\r\n    entered: boolean;\r\n    requestClose: boolean;\r\n}\r\n\r\ninterface State {\r\n    snacks: Snack[];\r\n    queue: Snack[];\r\n    contextValue: ProviderContext;\r\n}\r\n\r\nclass SnackbarProvider extends Component<SnackbarProviderProps, State> {\r\n    constructor(props: SnackbarProviderProps) {\r\n        super(props);\r\n        this.state = {\r\n            snacks: [],\r\n            queue: [], // eslint-disable-line react/no-unused-state\r\n            contextValue: {\r\n                enqueueSnackbar: this.enqueueSnackbar.bind(this),\r\n                closeSnackbar: this.closeSnackbar.bind(this),\r\n            },\r\n        };\r\n    }\r\n\r\n    get maxSnack(): number {\r\n        return this.props.maxSnack || DEFAULTS.maxSnack;\r\n    }\r\n\r\n    /**\r\n     * Adds a new snackbar to the queue to be presented.\r\n     * Returns generated or user defined key referencing the new snackbar or null\r\n     */\r\n    enqueueSnackbar = (message: SnackbarMessage, opts: OptionsObject = {}): SnackbarKey => {\r\n        const {\r\n            key,\r\n            preventDuplicate,\r\n            ...options\r\n        } = opts;\r\n\r\n        const hasSpecifiedKey = isDefined(key);\r\n        const id = hasSpecifiedKey ? (key as SnackbarKey) : new Date().getTime() + Math.random();\r\n\r\n        const merger = merge(options, this.props, DEFAULTS);\r\n        const snack: Snack = {\r\n            key: id,\r\n            ...options,\r\n            message,\r\n            open: true,\r\n            entered: false,\r\n            requestClose: false,\r\n            variant: merger('variant'),\r\n            anchorOrigin: merger('anchorOrigin'),\r\n            autoHideDuration: merger('autoHideDuration'),\r\n        };\r\n\r\n        if (options.persist) {\r\n            snack.autoHideDuration = undefined;\r\n        }\r\n\r\n        this.setState((state) => {\r\n            if ((preventDuplicate === undefined && this.props.preventDuplicate) || preventDuplicate) {\r\n                const compareFunction = (item: Snack): boolean => (\r\n                    hasSpecifiedKey ? item.key === key : item.message === message\r\n                );\r\n\r\n                const inQueue = state.queue.findIndex(compareFunction) > -1;\r\n                const inView = state.snacks.findIndex(compareFunction) > -1;\r\n                if (inQueue || inView) {\r\n                    return state;\r\n                }\r\n            }\r\n\r\n            return this.handleDisplaySnack({\r\n                ...state,\r\n                queue: [...state.queue, snack],\r\n            });\r\n        });\r\n\r\n        return id;\r\n    };\r\n\r\n    /**\r\n     * Reducer: Display snack if there's space for it. Otherwise, immediately\r\n     * begin dismissing the oldest message to start showing the new one.\r\n     */\r\n    handleDisplaySnack: Reducer = (state) => {\r\n        const { snacks } = state;\r\n        if (snacks.length >= this.maxSnack) {\r\n            return this.handleDismissOldest(state);\r\n        }\r\n        return this.processQueue(state);\r\n    };\r\n\r\n    /**\r\n     * Reducer: Display items (notifications) in the queue if there's space for them.\r\n     */\r\n    processQueue: Reducer = (state) => {\r\n        const { queue, snacks } = state;\r\n        if (queue.length > 0) {\r\n            return {\r\n                ...state,\r\n                snacks: [...snacks, queue[0]],\r\n                queue: queue.slice(1, queue.length),\r\n            };\r\n        }\r\n        return state;\r\n    };\r\n\r\n    /**\r\n     * Reducer: Hide oldest snackbar on the screen because there exists a new one which we have to display.\r\n     * (ignoring the one with 'persist' flag. i.e. explicitly told by user not to get dismissed).\r\n     *\r\n     * Note 1: If there is already a message leaving the screen, no new messages are dismissed.\r\n     * Note 2: If the oldest message has not yet entered the screen, only a request to close the\r\n     *         snackbar is made. Once it entered the screen, it will be immediately dismissed.\r\n     */\r\n    handleDismissOldest: Reducer = (state) => {\r\n        if (state.snacks.some(item => !item.open || item.requestClose)) {\r\n            return state;\r\n        }\r\n\r\n        let popped = false;\r\n        let ignore = false;\r\n\r\n        const persistentCount = state.snacks.reduce((acc, current) => (\r\n            acc + (current.open && current.persist ? 1 : 0)\r\n        ), 0);\r\n\r\n        if (persistentCount === this.maxSnack) {\r\n            warning(MESSAGES.NO_PERSIST_ALL);\r\n            ignore = true;\r\n        }\r\n\r\n        const snacks = state.snacks.map((item) => {\r\n            if (!popped && (!item.persist || ignore)) {\r\n                popped = true;\r\n\r\n                if (!item.entered) {\r\n                    return {\r\n                        ...item,\r\n                        requestClose: true,\r\n                    };\r\n                }\r\n\r\n                if (item.onClose) item.onClose(null, REASONS.MAXSNACK, item.key);\r\n                if (this.props.onClose) this.props.onClose(null, REASONS.MAXSNACK, item.key);\r\n\r\n                return {\r\n                    ...item,\r\n                    open: false,\r\n                };\r\n            }\r\n\r\n            return { ...item };\r\n        });\r\n\r\n        return { ...state, snacks };\r\n    };\r\n\r\n    /**\r\n     * Set the entered state of the snackbar with the given key.\r\n     */\r\n    handleEnteredSnack: TransitionHandlerProps['onEntered'] = (node, isAppearing, key) => {\r\n        if (!isDefined(key)) {\r\n            throw new Error('handleEnteredSnack Cannot be called with undefined key');\r\n        }\r\n\r\n        this.setState(({ snacks }) => ({\r\n            snacks: snacks.map(item => (\r\n                item.key === key ? { ...item, entered: true } : { ...item }\r\n            )),\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Hide a snackbar after its timeout.\r\n     */\r\n    handleCloseSnack: TransitionHandlerProps['onClose'] = (event, reason, key) => {\r\n        // should not use createChainedFunction for onClose.\r\n        // because this.closeSnackbar called this function\r\n        if (this.props.onClose) {\r\n            this.props.onClose(event, reason, key);\r\n        }\r\n\r\n        if (reason === REASONS.CLICKAWAY) return;\r\n        const shouldCloseAll = key === undefined;\r\n\r\n        this.setState(({ snacks, queue }) => ({\r\n            snacks: snacks.map((item) => {\r\n                if (!shouldCloseAll && item.key !== key) {\r\n                    return { ...item };\r\n                }\r\n\r\n                return item.entered\r\n                    ? { ...item, open: false }\r\n                    : { ...item, requestClose: true };\r\n            }),\r\n            queue: queue.filter(item => item.key !== key), // eslint-disable-line react/no-unused-state\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * Close snackbar with the given key\r\n     */\r\n    closeSnackbar: ProviderContext['closeSnackbar'] = (key) => {\r\n        // call individual snackbar onClose callback passed through options parameter\r\n        const toBeClosed = this.state.snacks.find(item => item.key === key);\r\n        if (isDefined(key) && toBeClosed && toBeClosed.onClose) {\r\n            toBeClosed.onClose(null, REASONS.INSTRUCTED, key);\r\n        }\r\n\r\n        this.handleCloseSnack(null, REASONS.INSTRUCTED, key);\r\n    }\r\n\r\n    /**\r\n     * When we set open attribute of a snackbar to false (i.e. after we hide a snackbar),\r\n     * it leaves the screen and immediately after leaving animation is done, this method\r\n     * gets called. We remove the hidden snackbar from state and then display notifications\r\n     * waiting in the queue (if any). If after this process the queue is not empty, the\r\n     * oldest message is dismissed.\r\n     */\r\n    // @ts-ignore\r\n    handleExitedSnack: TransitionHandlerProps['onExited'] = (event, key1, key2) => {\r\n        const key = key1 || key2;\r\n        if (!isDefined(key)) {\r\n            throw new Error('handleExitedSnack Cannot be called with undefined key');\r\n        }\r\n\r\n        this.setState((state) => {\r\n            const newState = this.processQueue({\r\n                ...state,\r\n                snacks: state.snacks.filter(item => item.key !== key),\r\n            });\r\n\r\n            if (newState.queue.length === 0) {\r\n                return newState;\r\n            }\r\n\r\n            return this.handleDismissOldest(newState);\r\n        });\r\n    };\r\n\r\n    render(): JSX.Element {\r\n        const { contextValue } = this.state;\r\n        const {\r\n            maxSnack: dontspread1,\r\n            preventDuplicate: dontspread2,\r\n            variant: dontspread3,\r\n            anchorOrigin: dontspread4,\r\n            iconVariant,\r\n            dense = DEFAULTS.dense,\r\n            hideIconVariant = DEFAULTS.hideIconVariant,\r\n            domRoot,\r\n            children,\r\n            classes = {},\r\n            ...props\r\n        } = this.props;\r\n\r\n        const categ = this.state.snacks.reduce<SnacksByPosition>((acc, current) => {\r\n            const category = originKeyExtractor(current.anchorOrigin);\r\n            const existingOfCategory = acc[category] || [];\r\n            return {\r\n                ...acc,\r\n                [category]: [...existingOfCategory, current],\r\n            };\r\n        }, {});\r\n\r\n        const snackbars = Object.keys(categ).map((origin) => {\r\n            const snacks = categ[origin];\r\n            return (\r\n                <SnackbarContainer\r\n                    key={origin}\r\n                    dense={dense}\r\n                    anchorOrigin={snacks[0].anchorOrigin}\r\n                    className={clsx(\r\n                        classes.containerRoot,\r\n                        classes[transformer.toContainerAnchorOrigin(origin)],\r\n                    )}\r\n                >\r\n                    {snacks.map(snack => (\r\n                        <SnackbarItem\r\n                            {...props}\r\n                            key={snack.key}\r\n                            snack={snack}\r\n                            dense={dense}\r\n                            iconVariant={iconVariant}\r\n                            hideIconVariant={hideIconVariant}\r\n                            classes={omitContainerKeys(classes)}\r\n                            onClose={this.handleCloseSnack}\r\n                            onExited={createChainedFunction([this.handleExitedSnack, this.props.onExited])}\r\n                            onEntered={createChainedFunction([this.handleEnteredSnack, this.props.onEntered])}\r\n                        />\r\n                    ))}\r\n                </SnackbarContainer>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <SnackbarContext.Provider value={contextValue}>\r\n                {children}\r\n                {domRoot ? createPortal(snackbars, domRoot) : snackbars}\r\n            </SnackbarContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SnackbarProvider;\r\n","import { useContext } from 'react';\r\nimport SnackbarContext from './SnackbarContext';\r\nimport { ProviderContext } from '.';\r\n\r\nexport default (): ProviderContext => useContext(SnackbarContext);\r\n","import React from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport getDisplayName from './utils/getDisplayName';\r\nimport SnackbarContext from './SnackbarContext';\r\n\r\nconst withSnackbar = (Component) => {\r\n    const WrappedComponent = React.forwardRef((props, ref) => (\r\n        <SnackbarContext.Consumer>\r\n            {context => (\r\n                <Component\r\n                    {...props}\r\n                    ref={ref}\r\n                    enqueueSnackbar={context.enqueueSnackbar}\r\n                    closeSnackbar={context.closeSnackbar}\r\n                />\r\n            )}\r\n        </SnackbarContext.Consumer>\r\n    ));\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        WrappedComponent.displayName = `WithSnackbar(${getDisplayName(Component)})`;\r\n    }\r\n\r\n    hoistNonReactStatics(WrappedComponent, Component);\r\n\r\n    return WrappedComponent;\r\n};\r\n\r\nexport default withSnackbar;\r\n"],"names":["React","createContext","allClasses","containerRoot","containerAnchorOriginTopCenter","containerAnchorOriginBottomCenter","containerAnchorOriginTopRight","containerAnchorOriginBottomRight","containerAnchorOriginTopLeft","containerAnchorOriginBottomLeft","DEFAULTS","maxSnack","dense","hideIconVariant","variant","autoHideDuration","anchorOrigin","vertical","horizontal","TransitionComponent","Slide","transitionDuration","enter","exit","capitalise","text","charAt","toUpperCase","slice","omitContainerKeys","classes","Object","keys","filter","key","reduce","obj","REASONS","TIMEOUT","CLICKAWAY","MAXSNACK","INSTRUCTED","transformer","origin","isDefined","value","numberOrNull","numberish","objectMerge","options","props","defaults","Root","styled","display","flexWrap","flexGrow","theme","breakpoints","up","minWidth","SnackbarContent","forwardRef","ref","className","clsx","componentName","DIRECTION","right","left","bottom","top","getTransitionDirection","CheckIcon","SvgIcon","d","WarningIcon","ErrorIcon","InfoIcon","iconStyles","fontSize","marginInlineEnd","defaultIconVariants","undefined","success","style","warning","error","info","createChainedFunction","funcs","extraArg","acc","func","args","argums","indexOf","push","apply","this","useEnhancedEffect","window","useEventCallback","fn","current","contentRoot","lessPadding","variantSuccess","variantError","variantInfo","variantWarning","message","action","wrappedRoot","StyledSnackbar","children","ClickAwayListenerProps","disableWindowBlurListener","onClose","onMouseEnter","onMouseLeave","open","resumeHideDuration","other","timerAutoHide","handleClose","setAutoHideTimer","autoHideDurationParam","clearTimeout","setTimeout","handlePause","handleResume","addEventListener","removeEventListener","React.createElement","ClickAwayListener","onClickAway","event","backgroundColor","emphasize","palette","background","mode","type","position","transform","typography","body2","color","getContrastText","alignItems","padding","borderRadius","boxShadow","paddingLeft","marginLeft","marginRight","SnackbarItem","propClasses","timeout","useRef","useState","collapsed","setCollapsed","useEffect","snack","ariaAttributes","otherClassName","iconVariant","otherAction","otherContent","content","otherTranComponent","otherTranProps","TransitionProps","otherTranDuration","entered","singleContent","singleAction","singleAriaAttributes","snackMessage","singleTranComponent","singleTranProps","singleTranDuration","singleSnackProps","icon","_extends","otherAriaAttributes","transitionProps","direction","callbacks","cbName","Collapse","unmountOnExit","onExited","root","appear","onExit","onExiting","onEnter","onEntering","onEntered","requestClose","INSTRCUTED","role","singleClassName","id","collapse","rootDense","center","boxSizing","maxHeight","zIndex","snackbar","height","width","transition","pointerEvents","SNACKBAR_INDENTS","maxWidth","down","flexDirection","xsWidthMargin","SnackbarContainer","combinedClassname","memo","SnackbarProvider","opts","preventDuplicate","hasSpecifiedKey","Date","getTime","Math","random","merger","name","merge","_this","persist","setState","state","compareFunction","item","inQueue","queue","findIndex","inView","snacks","handleDisplaySnack","length","handleDismissOldest","processQueue","some","popped","ignore","map","node","isAppearing","Error","reason","shouldCloseAll","toBeClosed","find","handleCloseSnack","key1","key2","newState","contextValue","enqueueSnackbar","bind","closeSnackbar","render","dontspread1","domRoot","categ","anchor","category","snackbars","_this2","handleExitedSnack","handleEnteredSnack","SnackbarContext","Provider","createPortal","Component","useContext","WrappedComponent","Consumer","context","hoistNonReactStatics"],"mappings":"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"}